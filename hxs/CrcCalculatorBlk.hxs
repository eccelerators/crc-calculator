//******************************************************************************
//
//                  /------o
//            eccelerators
//         o------/
//
// This file is an Eccelerators GmbH sample project.
//
// MIT License:
// Copyright (c) 2024 Eccelerators GmbH
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//******************************************************************************
use Eccelerators.Library.Base.*;

namespace Eccelerators.Library.IP
{
	block CrcCalculatorBlk
	{
		Name = "CRC Calculator Block";
		Description = "
			This block defines a CRC Calculator using the ethernet polynom only.

			Constraints:

			1. Use generally 32-bit registers accessed by instructions writing or reading 32-bit only.

			CRC operation:

			The CRC calculation unit has a single 32-bit read/write data register (CRC_DR). It is used to
			input new data (write access), and holds the result of the previous CRC calculation (read
			access).

			Each write operation to the data register creates a combination of the previous CRC value
			(stored in CRC_DR) and the new one. CRC computation is done on the whole 32-bit data.
			
			All registers can be only accessed using a DoubleWord (32-bit).

			The CRC calculator can be initialized to a programmable value using the RESET control bit
			in the CRC_CR register (the default value is 0xFFFFFFFF).

			The initial CRC value can be programmed with the CRC_INIT register. The CRC_DR
			register is automatically initialized upon CRC_INIT register write access.

			The CRC_IDR register can be used to hold a temporary value related to CRC calculation. It
			is not affected by the SwReset of the CRC_CR register.

			Block Diagram:

			.. figure:: resources/PacuScCrcCalculatorIfcOverview.png

				CrcCalculator overview

			";
		Registers = [
			CRC_DR,
			CRC_IDR,
			CRC_CR,
			CRC_INIT(Offset=0x10),
			CRC_POL
		];
	}

	register CRC_DR
	{
		Name = "CRC Data Register";
		Description = "
			This register is used to write new data to the CRC calculator.
			It holds the previous CRC calculation result when it is read.

			Write accesses must be 32-bit.
			Read accesses must be 32-bit.
		";
		Bits = [CrcData];
		WriteRegisterPulse = true;
		data CrcData
		{
			Width = 32;
			Resets = [
				BusReset.Async(Value=0xFFFFFFFF, Behaviour=ResetBehaviour.Write),
				CrcSoftReset(Value=0xFFFFFFFF, Behaviour=ResetBehaviour.Write)
			];
			Behaviour = BitBehaviour.ReadTransparentWriteRegister;
		}
	}

	register CRC_IDR
	{
		Name = "CRC Independent Data Register";
		Description = "
			General-purpose 32-bit data register.
			These bits can be used as a temporary storage location for four bytes.
			This register is not affected by CRC unit resets generated by the SwReset
			bit in the CRC_CR register.

			Write and Read accesses must be 32-bit.
		";
		Bits = [CrcIdrData];
		data CrcIdrData
		{
			Width = 32;
			Behaviour = BitBehaviour.Loopback;
			Resets = [BusReset.Async(Value=0x00000000)];
		}
	}

	register CRC_CR
	{
		Name = "CRC Control Register";
		WriteTransparentPulse = true;
		Description = "
			Software control and configuration of the CRC controller.

			Write and Read accesses must be 32-bit.
		";
		Width = 32;
		Bits = [SwReset];
		enum SwReset
		{
			Name = "Software Reset";
			Description = "
				Software writes the value Execute to this bit to reset the CRC calculation unit and set the 
				data register to the value stored in the CRC_INIT register (CrcSoftReset signal is 
				activated). The value isn't stored and cannot be read back by SW. Solely the write 
				access triggers the reset action.
			";
			Behaviour = BitBehaviour.WriteTransparent;
			Width = 1;
			Values = [
				InEffective,
				Execute
			];
			Resets = [BusReset.Async(Value=0b0, Behaviour=ResetBehaviour.Write)];
			value InEffective
			{
				Name = "Writing this value has no effect.";
				Behaviour = ValueBehaviour.Write;
				Value = 0b0;
			}
			value Execute
			{
				Name = "Reset the CRC controller unit.";
				Behaviour = ValueBehaviour.Write;
				Value = 0b1;
			}
		}
	}

	register CRC_INIT
	{
		Name = "CRC Initial Value";
		Description = "
			This register is used to write the CRC initial value.
			The initial CRC value can be programmed with the CRC_INIT register. The CRC accumulator
			register is automatically initialized upon a CRC_INIT register write access.

			Write and Read accesses must be 32-bit.
			";
		Width = 32;
		WriteRegisterPulse = true;
		Bits = [InitialValue];
		data InitialValue
		{
			Name = "Initial Value";
			Description = "
				The CRC initial value.
			";
			Width = 32;
			Resets = [
				BusReset.Async(Value=0xFFFFFFFF, Behaviour=ResetBehaviour.Write),
				CrcSoftReset(Value=0xFFFFFFFF, Behaviour=ResetBehaviour.Write)
			];
		}
	}

	register CRC_POL
	{
		Name = "CRC Polynomial";
		Description = "
			This register is read-only and provides the constant of the ethernet polynom.
		";
		Bits = [CrcPolynomial];
		data CrcPolynomial
		{
			Width = 32;
			Behaviour = BitBehaviour.Constant;
			Values = [value EthernetPolynominal
				{
					Value = 0x04C11DB7;
				}];
		}
	}

	reset CrcSoftReset
	{
		Name = "Crc Controller Software Reset";
		Description = "
			Reset controlled by SW, initiated by CRC_CR SwReset bit action.
			";
	}
}
