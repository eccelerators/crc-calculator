//******************************************************************************
//
//                  /------o
//            eccelerators
//         o------/
//
// This file is an Eccelerators GmbH sample project.
//
// MIT License:
// Copyright (c) 2023 Eccelerators GmbH
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//******************************************************************************
use Eccelerators.Library.Base.*;

namespace Eccelerators.Library.IP
{
    block CrcCalculatorBlk
    {
        Name = "CRC Calculator Block";
        Description = "
			This block defines a basic CRC Calculator using the ethernet polynom.

			Constraints:

			1. Use registers only.
			2. ... .

			Block Diagram:

			.. figure:: resources/Diagram.png
			   :scale: 9

			   CRC Calculator Block Diagram

			";
        Registers = [
            CRC_DR,
            CRC_IDR,
            CRC_CR,
            CRC_INIT(Offset=0x10),
            CRC_POL
        ];
    }

    register CRC_DR
    {
        Name = "CRC Data Register";
        Bits = [CrcData];
        WriteRegisterPulse = true;
    }

    register CRC_IDR
    {
        Name = "CRC Independent Data Register";
        Bits = [CrcIdrData];
    }

    register CRC_CR
    {
        Name = "CRC Control Register";
        Bits = [CrcControl];
    }

    register CRC_INIT
    {
        Name = "CRC Initial Value";
        Bits = [CrcInitialValue];
    }

    register CRC_POL
    {
        Name = "CRC Polynomial";
        Bits = [CrcPolynomial];
    }

    data CrcData
    {
        Width = 32;
        Resets = [{ 0xFFFFFFFF : BusReset.Async }];
        Behaviour = BitBehaviour.ReadTransparentWriteRegister;
    }

    data CrcIdrData
    {
        Width = 32;
    }

    enum CrcControl
    {
        Width = 32;
        Values = [{
                0 : CrcControlReset,
                3 : CrcPolySize,
                5 : CrcReverseInputData,
                7 : CrcReverseOutputData
            }];
    }

    data CrcControlReserved
    {
        Width = 24;
    }

    data CrcInitialValue
    {
        Width = 32;
    }

    data CrcPolynomial
    {
        Width = 32;
        Behaviour = BitBehaviour.Constant;
        Values = [value EthernetPolynominal { Value = 0x04C11DB7; }];
    }

    value CrcControlReset
    {
        Width = 1;
    }

    value CrcPolySize
    {
        Width = 2;
    }

    value CrcReverseInputData
    {
        Width = 2;
    }

    value CrcReverseOutputData
    {
        Width = 1;
    }
}
